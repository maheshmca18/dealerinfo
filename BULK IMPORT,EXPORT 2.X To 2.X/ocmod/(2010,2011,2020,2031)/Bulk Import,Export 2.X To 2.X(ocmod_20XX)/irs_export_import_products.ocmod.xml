<modification>
    <name>irs_import_export_categories</name>
    <version>1.1</version>
    <author>IRSSOFT</author>
    <code>irs_import_export_categories</code>
    <link>www.irssoft.com</link>

<!--products import-->
<file path="admin/language/english/catalog/product.php">
        <operation>
            <search><![CDATA[$_['heading_title']          = 'Products';]]></search>
            <add position="after"><![CDATA[$_['button_import']                = 'Import';
			  $_['button_export']		     = 'Export';]]></add>
        </operation>
    </file>
<file path="admin/controller/catalog/product.php">
        <operation>
            <search><![CDATA[$data['delete'] = $this->url->link('catalog/product/delete', 'token=' . $this->session->data['token'] . $url, 'SSL');]]></search>
            <add position="before"><![CDATA[$data['button_import'] = $this->language->get('button_import');
        $data['import'] = $this->url->link('catalog/product/import', 'token=' . $this->session->data['token'] . $url, 'SSL');
        $data['button_export'] = $this->language->get('button_export');
        $data['export'] = $this->url->link('catalog/product/products_export', 'token=' . $this->session->data['token']. $url, 'SSL');
]]></add>
        </operation>

        <operation>
            <search><![CDATA[public function autocomplete() {]]></search>
            <add position="before"><![CDATA[ public function import() {
		
		$excel_field_error = 0;
		$_SESSION['productlist']=array();
	
		$this->load->language('catalog/product');
		
		$this->load->model('catalog/product');
		$this->load->model('catalog/category');
		$this->load->model('catalog/manufacturer');
		$this->load->model('localisation/stock_status');
		$this->load->model('localisation/length_class');
		$this->load->model('localisation/weight_class');
		$this->load->model('localisation/tax_class');
		$this->load->model('tool/image');
		
		$data['heading_title'] = "Import Product Data";
		
		

		$data['entry_import'] = $this->language->get('Upload CSV File');
		
		$data['entry_insertonly'] = $this->language->get('Insert Only');	
				
		$data['action'] = $this->url->link('catalog/product/import', 'token=' . $this->session->data['token'], 'SSL');
		
		$data['importdataurl'] = $this->url->link('catalog/product/importproducts', 'token=' . $this->session->data['token'], 'SSL');
		
		
		$data['sampleexport'] = $this->url->link('catalog/product/productsampleexport', 'token=' . $this->session->data['token'], 'SSL');
		$data['sample_export'] = $this->language->get('Sample Csv File');
		
  		$data['breadcrumbs'] = array();

   		$data['breadcrumbs'][] = array(
       		'text'      => $this->language->get('text_home'),
			'href'      => $this->url->link('common/home', 'token=' . $this->session->data['token'], 'SSL'),  		
      		'separator' => false
   		);

   		$data['breadcrumbs'][] = array(
       		'text'      => $this->language->get('heading_title'),
			'href'      => $this->url->link('catalog/product', 'token=' . $this->session->data['token'], 'SSL'),
      		'separator' => ' :: '
   		);
		
		
		if(isset($_POST['submit']))
		{		
				$insertonly=0;
				$version_check=$_POST['opcversion'];
				
				if(isset($_POST['insertonly']) && $_POST['insertonly']==1)
				$insertonly=1;
				
				
				if($this->validateImport())
				{  // import form validate start
				
				 if ((isset($this->request->files['file'])) && (is_uploaded_file($this->request->files['file']['tmp_name']))) 
				 { //file upload start

					if($version_check=="opc2101" || $version_check=="opc2031" || $version_check=="opc2020" || 		   $version_check=="opc2011" || $version_check=="opc2010")
						{ //opc version check start
				 
							@set_time_limit(3600);
						if (substr(@ini_get("memory_limit"), 0, -1) < "512") {
									@ini_set("memory_limit", "512M");
								}
						ini_set("memory_limit", "512M");
						ini_set("max_execution_time", 180);
						ini_set('display_errors', 1);
						ini_set('log_errors', 1);
						error_reporting(E_ALL);
						//set_time_limit( 60 );
						
						$filename = $this->request->files['file']['tmp_name'];

						//chdir('../system/library/PHPExcel'); // change directory to PHPExcel library
						//require_once( 'Classes/PHPExcel.php' );
						//chdir('../../../admin');

						require_once('../system/library/PHPExcel/Classes/PHPExcel.php' );

						$inputFileType = PHPExcel_IOFactory::identify($filename);
						$objReader = PHPExcel_IOFactory::createReader($inputFileType);
						//$objReader->setReadDataOnly(true);
						$reader = $objReader->load($filename);
						$reader = &$reader;						
					//			$this->clearCache();
					
						$xldata = $reader->getSheet(0);
						
						$isFirstRow = TRUE;
						
						$i = 0;
						
						$k = $xldata->getHighestRow();
						
						$columns = PHPExcel_Cell::columnIndexFromString($xldata->getHighestColumn());

						$product_list_data = array();
						$product_array = array();
						$temp=0;//declared
					    $array_additional_image=array();
						
						if($columns == 47)
						{
						
						$customer_list_array=array();
						for ($i = 0; $i < $k; $i++) {  // Excel row loop start
							//Skip the header row
							if ($isFirstRow) {
								$isFirstRow = FALSE;
								continue;
							}			
							
							$product_categories=array();				
							
							// Collect Detail
							$productname = $this->getCell($xldata, $i, 1);
					        $description = $this->getCell($xldata, $i, 2);
							$meta_description = $this->getCell($xldata, $i, 3);
							$meta_keyword = $this->getCell($xldata, $i, 4);
							$tag = $this->getCell($xldata, $i, 5);
							
							$model = $this->getCell($xldata, $i, 6);
							
							$store_id = $this->getCell($xldata, $i, 7);
							$store_id_array=array();
							$store_id_array[]=$store_id;
							
							$sku =$this->getCell($xldata, $i, 8);
							$upc = $this->getCell($xldata, $i, 9);
							$ean = $this->getCell($xldata, $i, 10);							
							$jan = $this->getCell($xldata, $i, 11);
							$isbn = $this->getCell($xldata, $i, 12);
							$mpn = $this->getCell($xldata, $i, 13);
							$location = $this->getCell($xldata, $i, 14);							
							$quantity = $this->getCell($xldata, $i, 15);
							$stock_status_name = $this->getCell($xldata, $i, 16);
							$stock_status_id=$this->model_catalog_product->getStockStatusId($stock_status_name);
				            $product_image_path = $this->getCell($xldata, $i, 17);
							//print_r(array_map('trim',explode("/",$product_image_path)));exit
							$array1=explode("/",$product_image_path);
							$array2 = array_shift($array1);							
							array_unshift($array1,"catalog");							
							$array_image=implode("/",$array1);
							//print_r($array3);exit;
							
							$require_shipping = $this->getCell($xldata, $i, 18);							
							$price = $this->getCell($xldata, $i, 19);
							$tax_class_id = $this->getCell($xldata, $i, 20);
							$date_available = $this->getCell($xldata, $i, 21);
							$weight = $this->getCell($xldata, $i, 22);							
							$weight_class_id = $this->getCell($xldata, $i, 23);
							$length = $this->getCell($xldata, $i, 24);
							$width = $this->getCell($xldata, $i, 25);
							$height = $this->getCell($xldata, $i, 26);
							$length_class_id = $this->getCell($xldata, $i, 27);
							$subtract = $this->getCell($xldata, $i, 28);
							$minimum = $this->getCell($xldata, $i, 29);
							$sort_order = $this->getCell($xldata, $i, 30);
							$viewed= $this->getCell($xldata, $i, 31);
							$points = $this->getCell($xldata, $i, 32);
							$status = $this->getCell($xldata, $i, 33);
							
							$manufacturer_name = $this->getCell($xldata, $i, 34);
							$manufacturer_id=$this->model_catalog_product->getImportManufacturerId($manufacturer_name);
							
							$get_product_category_id=array();
							$product_category = $this->getCell($xldata, $i, 35);
							$explode_product_category=explode(",",$product_category);
							foreach ($explode_product_category as $explode_product_category1) {								
								$get_product_category_id[]=$this->model_catalog_product->getImportCategoryId($explode_product_category1);								
							}							
							
						    $additional_image_path = $this->getCell($xldata, $i, 36);							
							$array11=explode(",",$additional_image_path);
							//print_r($array11);exit;
							$short=0;
				            foreach ($array11 as $array12) {
								$array13=explode("/",$array12);
								//print_r($array13);exit;
							    $array14 = array_shift($array13);
								//print_r($array13)	;exit;						
							    array_unshift($array13,"catalog");							
							    $array_additional_image[$short]['image']=implode("/",$array13);
								$array_additional_image[$short]['sort_order']=$short;
								$short++;
								
							}						
							
							$option_type = $this->getCell($xldata, $i, 37);			
							$get_option_id=$this->model_catalog_product->getOptionId($option_type);											
						    $get_option_type=$this->model_catalog_product->getOptionTypeId($get_option_id);							
							$required = $this->getCell($xldata, $i, 38);							
							$option_value = $this->getCell($xldata, $i, 39);
							$get_option_value_id=$this->model_catalog_product->getOptionValueId($option_value);							
							$option_value_quantity = $this->getCell($xldata, $i, 40);
							$option_value_subtract = $this->getCell($xldata, $i, 41);														
							$option_value_price= $this->getCell($xldata, $i, 42);
							$option_value_price_prefix = $this->getCell($xldata, $i, 43);
							$option_value_points = $this->getCell($xldata, $i, 44);
							$option_value_points_prefix= $this->getCell($xldata, $i, 45);
							$option_value_weight = $this->getCell($xldata, $i, 46);
							$option_value_weight_prefix = $this->getCell($xldata, $i, 47);
		
							if(!empty($productname)){
							$temp++;
							$temp_option=0;
							$temp_option_value=0;
						    $product_description=array();
							$custom_language_id=is_numeric($this->config->get('config_language_id'))?$this->config->get('config_language_id'):1;
							
					        $product_description[$custom_language_id]['name'] = $productname;
						    $product_description[$custom_language_id]['description'] = $description;
							$product_description[$custom_language_id]['meta_title'] = '12345';
						    $product_description[$custom_language_id]['meta_description'] = $meta_description;
							$product_description[$custom_language_id]['meta_keyword'] = $meta_keyword;
							$product_description[$custom_language_id]['tag'] = $meta_description;							
							
							$product_array[$temp]['product_description'] = $product_description;							
							
							$product_array[$temp]['model'] = $model;
							$product_array[$temp]['product_store'] = $store_id_array;
							$product_array[$temp]['sku'] = $sku;
						    $product_array[$temp]['upc'] = $upc;
						    $product_array[$temp]['ean'] = $ean;
							$product_array[$temp]['jan'] = $jan;
							$product_array[$temp]['isbn'] = $isbn;
							$product_array[$temp]['mpn'] = $mpn;
							$product_array[$temp]['location'] = $location;
							$product_array[$temp]['quantity'] = $quantity;
						    $product_array[$temp]['stock_status_id'] = $stock_status_id;
						    $product_array[$temp]['image'] = $array_image;
							$product_array[$temp]['shipping'] = ($require_shipping == "Yes")?1:0;
							$product_array[$temp]['price'] = $price;
							$product_array[$temp]['tax_class_id'] = $tax_class_id;
							$product_array[$temp]['date_available'] = $date_available;
							$product_array[$temp]['weight'] = $weight;
						    $product_array[$temp]['weight_class_id'] = $weight_class_id;
						    $product_array[$temp]['length'] = $length;
							$product_array[$temp]['width'] = $width;
							$product_array[$temp]['height'] = $height;
							$product_array[$temp]['length_class_id'] = $length_class_id;							
					        $product_array[$temp]['subtract'] = $subtract;
						    $product_array[$temp]['minimum'] = $minimum;
						    $product_array[$temp]['sort_order'] = $sort_order;
							$product_array[$temp]['viewed'] = $viewed;
							$product_array[$temp]['points'] = $points;
							$product_array[$temp]['status'] = ($status == "Enabled")?1:0;
							$product_array[$temp]['product_image'] = $array_additional_image;			
							
							// loop categories
							$product_array[$temp]['manufacturer'] = $manufacturer_name;							
							$product_array[$temp]['manufacturer_id'] = $manufacturer_id;							
							$product_array[$temp]['product_category'] = $get_product_category_id;
							
							$product_array[$temp]['product_option'][$temp_option]['product_option_id'] = '';
							$product_array[$temp]['product_option'][$temp_option]['name'] = $option_type;
							$product_array[$temp]['product_option'][$temp_option]['option_id'] = $get_option_id;
							$product_array[$temp]['product_option'][$temp_option]['type'] = $get_option_type;														
							$product_array[$temp]['product_option'][$temp_option]['required'] = ($required == "Yes")?1:0;
							$product_array[$temp]['product_option'][$temp_option]['value'] = $option_value;	
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['option_value_id']=$get_option_value_id; 
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['product_option_value_id']='';
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['quantity']=$option_value_quantity;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['subtract']=$option_value_subtract;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['price_prefix']=$option_value_price_prefix;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['price']=$option_value_price;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['points_prefix']=$option_value_points_prefix;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['points']=$option_value_points;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['weight_prefix']=$option_value_weight_prefix;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['weight']=$option_value_weight;
							}
							else
							{
								
								if(!empty($option_type)){
							$temp_option++;
							$temp_option_value++;
							$product_array[$temp]['product_option'][$temp_option]['product_option_id'] = '';
							$product_array[$temp]['product_option'][$temp_option]['name'] = $option_type;
							$product_array[$temp]['product_option'][$temp_option]['option_id'] = $get_option_id;
							$product_array[$temp]['product_option'][$temp_option]['type'] = $get_option_type;							
							$product_array[$temp]['product_option'][$temp_option]['required'] = ($required == "Yes")?1:0;
							$product_array[$temp]['product_option'][$temp_option]['value'] = $option_value;	
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['option_value_id']=$get_option_value_id; 
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['product_option_value_id']='';
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['quantity']=$option_value_quantity;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['subtract']=($option_value_subtract == "Yes")?1:0;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['price_prefix']=$option_value_price_prefix;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['price']=$option_value_price;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['points_prefix']=$option_value_points_prefix;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['points']=$option_value_points;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['weight_prefix']=$option_value_weight_prefix;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['weight']=$option_value_weight;
								}
								else{
							$temp_option_value++;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['option_value_id']=$get_option_value_id; 
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['product_option_value_id']='';
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['quantity']=$option_value_quantity;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['subtract']=($option_value_subtract == "Yes")?1:0;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['price_prefix']=$option_value_price_prefix;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['price']=$option_value_price;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['points_prefix']=$option_value_points_prefix;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['points']=$option_value_points;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['weight_prefix']=$option_value_weight_prefix;
							$product_array[$temp]['product_option'][$temp_option]['product_option_value'][$temp_option_value]['weight']=$option_value_weight;
								}
							}                
							
						
						} // Excel row loop end
						
							$product_list_data=$product_array;
						}
						else
						{
			             $excel_field_error = 1;
						}

						 }//opc version check end
						
					    } //file upload end		
						
						
						if(!$excel_field_error)
						{


							$data['sampletabledata']=$product_list_data;
							
							$_SESSION['productlist'] = $product_list_data;
						}

				} // import form validate end		
		
		}
		
        if (isset($this->error['warning'])) {
			$data['error_warning'] = $this->error['warning'];
		} else {
			$data['error_warning'] = '';
		}
		
		if (isset($this->error['errorfile'])) {
			$data['error_file'] = $this->error['errorfile'];
		} else {
			$data['error_file'] = '';
		}
 if (isset($this->error['errorfile_opcversion'])) {
            $data['error_file_opcversion'] = $this->error['errorfile_opcversion'];
        } else {
            $data['error_file_opcversion'] = '';
        }
		
		if($excel_field_error)
			{
			$data['error_fields'] = 'Upload like our Sample Excel File';			
			}
		else
			{
			$data['error_fields'] = '';			
			}
		
		
		
		$this->load->model('design/layout');
		$data['layouts']=$this->model_design_layout->getLayouts();
		
		$data['header']=$this->load->controller('common/header');
		$data['footer']=$this->load->controller('common/footer');
		$data['column_left']=$this->load->controller('common/column_left');

		
		$this->response->setOutput($this->load->view('catalog/product_import.tpl',$data));
		
	}
	

	public function importproducts()
	{
	$this->load->model('catalog/product');
	if(isset($_SESSION['productlist']) && is_array($_SESSION['productlist']))
	{
						foreach($_SESSION['productlist'] as $productdata)
						{                            
                                $productexist = $this->model_catalog_product->addProduct($productdata);                                
                           
                        } 
					
			unset($_SESSION['productlist']);
			$url = '';			
			$this->response->redirect($this->url->link('catalog/product', 'token=' . $this->session->data['token'] . $url, 'SSL'));	
	
	}
	
	
	}
	
    function getCell(&$worksheet, $row, $col, $default_val = '') {
        $col -= 1; // we use 1-based, PHPExcel uses 0-based column index
        $row += 1; // we use 0-based, PHPExcel used 1-based row index
        return ($worksheet->cellExistsByColumnAndRow($col, $row)) ? $worksheet->getCellByColumnAndRow($col, $row)->getValue() : $default_val;
    }
	
	
	public function productsampleexport()
	{
		/* Include PHPExcel class */
		//chdir('../system/library/PHPExcel');
		//require_once( 'Classes/PHPExcel.php' );
		//chdir('../../../admin');

		require_once('../system/library/PHPExcel/Classes/PHPExcel.php' );
		
		// Instantiate a new PHPExcel object
		$objPHPExcel = new PHPExcel(); 
		// Set the active Excel worksheet to sheet 0
		$objPHPExcel->setActiveSheetIndex(0); 
		// Initialise the Excel row number
		$rowCount = 1; 
		
		/* Add Heading Row */ 
			$objPHPExcel->getActiveSheet()->SetCellValue('A'.$rowCount, 'Product Name'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('B'.$rowCount, 'Description'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('C'.$rowCount, 'meta_description'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('D'.$rowCount, 'meta_keyword');  		
			$objPHPExcel->getActiveSheet()->SetCellValue('E'.$rowCount, 'tag');			
			
		    $objPHPExcel->getActiveSheet()->SetCellValue('F'.$rowCount, 'model');
			$objPHPExcel->getActiveSheet()->SetCellValue('G'.$rowCount, 'store_id'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('H'.$rowCount, 'sku'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('I'.$rowCount, 'upc'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('J'.$rowCount, 'ean');  		
			$objPHPExcel->getActiveSheet()->SetCellValue('K'.$rowCount, 'jan');
			$objPHPExcel->getActiveSheet()->SetCellValue('L'.$rowCount, 'isbn'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('M'.$rowCount, 'mpn'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('N'.$rowCount, 'location');  		
			$objPHPExcel->getActiveSheet()->SetCellValue('O'.$rowCount, 'quantity'); 						
		    $objPHPExcel->getActiveSheet()->SetCellValue('P'.$rowCount, 'stock_status_id'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('Q'.$rowCount, 'product_image_path'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('R'.$rowCount, 'require_shipping'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('S'.$rowCount, 'price');  		
			$objPHPExcel->getActiveSheet()->SetCellValue('T'.$rowCount, 'tax_class_id');
			$objPHPExcel->getActiveSheet()->SetCellValue('U'.$rowCount, 'date_available'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('V'.$rowCount, 'weight'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('W'.$rowCount, 'weight_class_id');  		
			$objPHPExcel->getActiveSheet()->SetCellValue('X'.$rowCount, 'length'); 			
			$objPHPExcel->getActiveSheet()->SetCellValue('Y'.$rowCount, 'width'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('Z'.$rowCount, 'height'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('AA'.$rowCount, 'length_class_id'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('AB'.$rowCount, 'subtract');  		
			$objPHPExcel->getActiveSheet()->SetCellValue('AC'.$rowCount, 'minimum');
			$objPHPExcel->getActiveSheet()->SetCellValue('AD'.$rowCount, 'sort_order'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('AE'.$rowCount, 'viewed'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('AF'.$rowCount, 'points');  		
			$objPHPExcel->getActiveSheet()->SetCellValue('AG'.$rowCount, 'status'); 			
    
			$objPHPExcel->getActiveSheet()->SetCellValue('AH'.$rowCount, 'Manufacturer Name'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('AI'.$rowCount, 'Category Name'); 			
			$objPHPExcel->getActiveSheet()->SetCellValue('AJ'.$rowCount, 'Additional Image');		 			
			
			$objPHPExcel->getActiveSheet()->SetCellValue('AK'.$rowCount, 'Select Type'); 			
			$objPHPExcel->getActiveSheet()->SetCellValue('AL'.$rowCount, 'Required');      
			$objPHPExcel->getActiveSheet()->SetCellValue('AM'.$rowCount, 'Option Value'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('AN'.$rowCount, 'Quantity');       
			$objPHPExcel->getActiveSheet()->SetCellValue('AO'.$rowCount, 'Subtrack stock');       
			$objPHPExcel->getActiveSheet()->SetCellValue('AP'.$rowCount, 'Price');      
			$objPHPExcel->getActiveSheet()->SetCellValue('AQ'.$rowCount, 'Price Prefix'); 			
			$objPHPExcel->getActiveSheet()->SetCellValue('AR'.$rowCount, 'Ponits'); 
			$objPHPExcel->getActiveSheet()->SetCellValue('AS'.$rowCount, 'Ponits Prdefix');
            $objPHPExcel->getActiveSheet()->SetCellValue('AT'.$rowCount, 'Weight');
			$objPHPExcel->getActiveSheet()->SetCellValue('AU'.$rowCount, 'weight Prefix');
		
			
		header("Content-Type: text/csv; charset=utf-8");
		header('Content-Disposition: attachment;filename="product_list_'.date("Y m d G i s").'.csv"'); 
		//header('Content-Disposition: attachment;filename="category_list_'.date("Y m d G i s").'.xlsx"'); 
		header('Cache-Control: max-age=0'); 
			
		// Instantiate a Writer to create an OfficeOpenXML Excel .xlsx file
		//$objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel,'CSV');
		// Write the Excel file to filename some_excel_file.xlsx in the current directory
		//$objWriter->save('some_excel_file.xlsx'); 
		
		/* Download CsV file in downloads */
		$objWriter->save('php://output'); 
					
//        chdir('../../..');
	}
	protected function validateImport() {
		 /*if (!$this->user->hasPermission('modify', 'sale/customer')) {
				$this->error['warning'] = $this->language->get('error_permission');
		}*/
		if(!$_POST['opcversion']){
	    	 $this->error['errorfile_opcversion'] = $this->language->get('Please Select upload Opencart version');
       		 }
		
		if (!$this->request->files['file']['tmp_name']) {
				$this->error['errorfile'] = $this->language->get('Please Upload a Excel/CSV file');
		}
		elseif($_FILES["file"]["name"])
		{
			$allowedExts = array("csv", "xlsx", "xls");
			$temp = explode(".", $_FILES["file"]["name"]);
			$extension = end($temp);
			
			if(!in_array($extension, $allowedExts))
				$this->error['errorfile'] = $this->language->get('Please Upload a Excel/CSV file');	
		}
		
		if (!$this->error) {
			return true;
		} else {
			return false;
		}
	}
//export products
public function products_export(){
	 
	 if (isset($this->request->get['filter_name'])) {
			$filter_name = $this->request->get['filter_name'];
		} else {
			$filter_name = null;
		}

		if (isset($this->request->get['filter_model'])) {
			$filter_model = $this->request->get['filter_model'];
		} else {
			$filter_model = null;
		}

		if (isset($this->request->get['filter_price'])) {
			$filter_price = $this->request->get['filter_price'];
		} else {
			$filter_price = null;
		}

		if (isset($this->request->get['filter_quantity'])) {
			$filter_quantity = $this->request->get['filter_quantity'];
		} else {
			$filter_quantity = null;
		}

		if (isset($this->request->get['filter_status'])) {
			$filter_status = $this->request->get['filter_status'];
		} else {
			$filter_status = null;
		}
		
		$filter_product_data = array(
			'filter_name'	  => $filter_name, 
			'filter_model'	  => $filter_model,
			'filter_price'	  => $filter_price,
			'filter_quantity' => $filter_quantity,
			'filter_status'   => $filter_status
		);
		
       $this->load->model('catalog/product');
       $results = $this->model_catalog_product->getProducts($filter_product_data);
	   
       $product_list = array();
	   $temp_count = 1;
	   
		foreach ($results as $result) { //print_r($results);exit;
			//print_r($results);  
		
			/*$special = false;

			$product_specials = $this->model_catalog_product->getProductSpecials($result['product_id']); 

			foreach ($product_specials  as $product_special) {
				if (($product_special['date_start'] == '0000-00-00' || $product_special['date_start'] < date('Y-m-d')) && ($product_special['date_end'] == '0000-00-00' || $product_special['date_end'] > date('Y-m-d'))) {
					$special = $product_special['price'];

					break;
				}					
			}	*/	
			
				    //$product_list[$temp_count]['product_id']  			= $result['product_id'];
					$product_list[$temp_count]['name']        			= $result['name'];
					$product_list[$temp_count]['description']    		= $this->cleanString($result['description']);
					$product_list[$temp_count]['meta_description']      = $result['meta_description'];
					$product_list[$temp_count]['meta_keyword']        	= $result['meta_keyword'];
					$product_list[$temp_count]['tag']        			= $result['tag'];					
					
					$product_list[$temp_count]['model']       			= $result['model'];
					$export_store_id = $this->model_catalog_product->getstoreID($result['product_id']);//print_r($export_store_id['store_id']);
					$product_list[$temp_count]['product_store']       		= $export_store_id['store_id'];
					$product_list[$temp_count]['sku']       			= $result['sku'];
					$product_list[$temp_count]['upc']       			= $result['upc'];
					$product_list[$temp_count]['ean']       			= $result['ean'];
					$product_list[$temp_count]['jan']       			= $result['jan'];
					$product_list[$temp_count]['isbn']       			= $result['isbn'];
					$product_list[$temp_count]['mpn']       			= $result['mpn'];
					$product_list[$temp_count]['location']       		= $result['location'];
					$product_list[$temp_count]['quantity']       		= $result['quantity'];
					
					$export_OutOfStockName = $this->model_catalog_product->getOutOfStockName($result['stock_status_id']);
					$product_list[$temp_count]['stock_status_id']       = $export_OutOfStockName;
					$product_list[$temp_count]['product_image_path']	= $result['image'];
					$product_list[$temp_count]['require_shipping']	    = ($result['shipping'] == 1 ? 'Yes' : 'No');
					$product_list[$temp_count]['price']       			= $result['price'];
					$product_list[$temp_count]['tax_class_id']          = $result['tax_class_id'];
					$product_list[$temp_count]['date_available']       	= $result['date_available'];
					$product_list[$temp_count]['weight']       			= $result['weight'];
					$product_list[$temp_count]['weight_class_id']       = $result['weight_class_id'];
					$product_list[$temp_count]['length']       			= $result['length'];
					$product_list[$temp_count]['width']       			= $result['width'];
					$product_list[$temp_count]['height']       			= $result['height'];
					$product_list[$temp_count]['length_class_id']       = $result['length_class_id'];
					$product_list[$temp_count]['subtract']       		= $result['subtract'];
					$product_list[$temp_count]['minimum']       		= $result['minimum'];
					$product_list[$temp_count]['sort_order']       		= $result['sort_order'];
					$product_list[$temp_count]['viewed']       			= $result['viewed'];
					$product_list[$temp_count]['points']       			= $result['points'];
					$product_list[$temp_count]['status']      			= ($result['status'] ? $this->language->get('text_enabled') : $this->language->get('text_disabled'));

				
            //take manufacturer name.........
			    $export_get_manufacturer_id = $this->model_catalog_product->export_getmanufacturerid($result['manufacturer_id']); 
				
			if(!empty($export_get_manufacturer_id)){
				
				foreach($export_get_manufacturer_id as $export_get_manufacturer_name){			
					
			    $product_list[$temp_count]['manufacturer_name']  = $export_get_manufacturer_name;	
				 				
					
				}
			}
			else
			{
				
				$product_list[$temp_count]['manufacturer_name']  = '';
			}
				
			//take category name	.........
				$export_get_category_id = $this->model_catalog_product->export_getcategoryid($result['product_id']);				
			    $temp=array();
				$export_get_category_name=array();
				  
			   foreach($export_get_category_id as $export_get_category_id1){
			   	 					  	
						$export_get_category_name[] = $this->model_catalog_product->export_getcategory_name($export_get_category_id1['category_id']);
				   
               }
				
			   foreach ($export_get_category_name as $export_get_category_name1) {				 	
						  	
							$temp[]=$export_get_category_name1['name'];
						  	
			   }	
				
			   $category_name = implode(',',$temp);
			   
			   $product_list[$temp_count]['category_name']    	= (isset($category_name) ? $category_name : ""); 
				

              //take additional image for products......
              $temp_image=array();			  
			  
              $export_get_additional_image_path = $this->model_catalog_product->export_getimagepath($result['product_id']);	 
			 $additional_image_path ="";
			  foreach ($export_get_additional_image_path as $export_get_additional_image_path1) {
	
			  	    $temp_image[]=$export_get_additional_image_path1['image'];
			      
	                $additional_image_path = implode(',',$temp_image);
				
			  }
			  $product_list[$temp_count]['additional_image_path']    	= $additional_image_path;
			  
			
				
			//take product option value	.....
			
			$export_get_option_details = $this->model_catalog_product->export_getoption_details($result['product_id']);
			//print_r($export_get_option_details);exit;
		 $option_temp=0;
		 foreach ($export_get_option_details as $getproduct_option_name1) { //start loop2
			     	
					
			     	
				 	if($option_temp==0){
					
					 $product_list[$temp_count]['option_type'] = $getproduct_option_name1['name'];
					 $product_list[$temp_count]['required'] = ($getproduct_option_name1['required'] == 1 ? 'Yes' : 'No');
	
					}
					else{
												
		   			//$product_list[$temp_count]['product_id']  			= '';
				        $product_list[$temp_count]['name']        			= '';
					$product_list[$temp_count]['description']    		= '';	
					$product_list[$temp_count]['meta_description']      = '';
					$product_list[$temp_count]['meta_keyword']        	= '';
					$product_list[$temp_count]['tag']        			= '';			
					
					$product_list[$temp_count]['model']       			= '';
					$product_list[$temp_count]['product_store']       	= '';
					$product_list[$temp_count]['sku']       			= '';
					$product_list[$temp_count]['upc']       			= '';
					$product_list[$temp_count]['ean']       			= '';
					$product_list[$temp_count]['jan']       			= '';
					$product_list[$temp_count]['isbn']       			= '';
					$product_list[$temp_count]['mpn']       			= '';
					$product_list[$temp_count]['location']       		= '';
					$product_list[$temp_count]['quantity']       		= '';
					$product_list[$temp_count]['stock_status_id']       = '';
					$product_list[$temp_count]['product_image_path']	= '';
					$product_list[$temp_count]['require_shipping']	    = '';
					$product_list[$temp_count]['price']       			= '';
					$product_list[$temp_count]['tax_class_id']          = '';
					$product_list[$temp_count]['date_available']       	= '';
					$product_list[$temp_count]['weight']       			= '';
					$product_list[$temp_count]['weight_class_id']       = '';
					$product_list[$temp_count]['length']       			= '';
					$product_list[$temp_count]['width']       			= '';
					$product_list[$temp_count]['height']       			= '';
					$product_list[$temp_count]['length_class_id']       = '';
					$product_list[$temp_count]['subtract']       		= '';
					$product_list[$temp_count]['minimum']       		= '';
					$product_list[$temp_count]['sort_order']       		= '';
					$product_list[$temp_count]['viewed']       			= '';
					$product_list[$temp_count]['points']       			= '';
					$product_list[$temp_count]['status']      			='';
					
					$product_list[$temp_count]['manufacturer_name']  = '';
					$product_list[$temp_count]['category_name']    	= '';
					$product_list[$temp_count]['additional_image_path']    	= '';					
					$product_list[$temp_count]['option_type'] = $getproduct_option_name1['name'];					
					$product_list[$temp_count]['required'] = ($getproduct_option_name1['required'] == 1 ? 'Yes' : 'No');
					
					}
					
					
					
					$t1=0;
					if(!empty($getproduct_option_name1['product_option_value'])){
					     	foreach ($getproduct_option_name1['product_option_value'] as $getproduct_option_value1) {
							
							 
								 if($t1==0){
								 		
								 	         $product_list[$temp_count]['option_value'] = $getproduct_option_value1['option_value_name'];
											 $product_list[$temp_count]['option_value_quantity'] = $getproduct_option_value1['quantity'];
											 $product_list[$temp_count]['option_value_subtract'] = ($getproduct_option_value1['subtract']==1 ? 'Yes' : 'No');
											 $product_list[$temp_count]['option_value_price'] = $getproduct_option_value1['price'];
											 $product_list[$temp_count]['option_value_price_prefix'] = $getproduct_option_value1['price_prefix'];
											 $product_list[$temp_count]['option_value_points'] = $getproduct_option_value1['points'];
											 $product_list[$temp_count]['option_value_points_prefix'] = $getproduct_option_value1['points_prefix'];
											 $product_list[$temp_count]['option_value_weight'] = $getproduct_option_value1['weight'];
											 $product_list[$temp_count]['option_value_weight_prefix'] = $getproduct_option_value1['weight_prefix'];
									            
									 }
									 else{
									            //$product_list[$temp_count]['product_id']  			= '';
											    $product_list[$temp_count]['name']        			= '';
												$product_list[$temp_count]['description']    		= '';
												$product_list[$temp_count]['meta_description']      = $result['meta_description'];
												$product_list[$temp_count]['meta_keyword']        	= $result['meta_keyword'];
												$product_list[$temp_count]['tag']        			= $result['tag'];
											
												
												$product_list[$temp_count]['model']       			= '';
												$product_list[$temp_count]['product_store']       	= '';
												$product_list[$temp_count]['sku']       			= '';
												$product_list[$temp_count]['upc']       			= '';
												$product_list[$temp_count]['ean']       			= '';
												$product_list[$temp_count]['jan']       			= '';
												$product_list[$temp_count]['isbn']       			= '';
												$product_list[$temp_count]['mpn']       			= '';
												$product_list[$temp_count]['location']       		= '';
												$product_list[$temp_count]['quantity']       		= '';
												$product_list[$temp_count]['stock_status_id']       = '';
												$product_list[$temp_count]['product_image_path']	= '';
												$product_list[$temp_count]['require_shipping']	    = '';
												$product_list[$temp_count]['price']       			= '';
												$product_list[$temp_count]['tax_class_id']          = '';
												$product_list[$temp_count]['date_available']       	= '';
												$product_list[$temp_count]['weight']       			= '';
												$product_list[$temp_count]['weight_class_id']       = '';
												$product_list[$temp_count]['length']       			= '';
												$product_list[$temp_count]['width']       			= '';
												$product_list[$temp_count]['height']       			= '';
												$product_list[$temp_count]['length_class_id']       = '';
												$product_list[$temp_count]['subtract']       		= '';
												$product_list[$temp_count]['minimum']       		= '';
												$product_list[$temp_count]['sort_order']       		= '';
												$product_list[$temp_count]['viewed']       			= '';
												$product_list[$temp_count]['points']       			= '';
												$product_list[$temp_count]['status']      			='';
					
												
												$product_list[$temp_count]['manufacturer_name']  = '';
												$product_list[$temp_count]['category_name']    	= '';
												$product_list[$temp_count]['additional_image_path']    	= '';												
												$product_list[$temp_count]['option_type'] = '';
												$product_list[$temp_count]['required'] = '';
					
								 	             $product_list[$temp_count]['option_value'] = $getproduct_option_value1['option_value_name'];
												 $product_list[$temp_count]['option_value_quantity'] = $getproduct_option_value1['quantity'];
												 $product_list[$temp_count]['option_value_subtract'] = ($getproduct_option_value1['subtract']==1 ? 'Yes' : 'No');
												 $product_list[$temp_count]['option_value_price'] = $getproduct_option_value1['price'];
												 $product_list[$temp_count]['option_value_price_prefix'] = $getproduct_option_value1['price_prefix'];
												 $product_list[$temp_count]['option_value_points'] = $getproduct_option_value1['points'];
												 $product_list[$temp_count]['option_value_points_prefix'] = $getproduct_option_value1['points_prefix'];
												 $product_list[$temp_count]['option_value_weight'] = $getproduct_option_value1['weight'];
												 $product_list[$temp_count]['option_value_weight_prefix'] = $getproduct_option_value1['weight_prefix'];
									         
											
									     }								
							 
							 $t1++;$temp_count++;
				         }
						 
                     }
                      
$option_temp++;$temp_count++;
					}
					
$temp_count++;
				}	
									
			//print_r($product_list);exit;						
						$products_data = array();
						
						$products_column=array();
						
						$products_column = array('Product Name', 'Product Description','Meta Description','Meta Keyword','Tag', 'Model', 'Store_id','sku','upc','ean','jan','isbn','mpn','location','quantity','stock_status_id','image','Require shipping','price','tax_class_id','date_available','weight','weight_class_id','length','width','height','length_class_id','subtract','minimum','sort_order','viewed','Points','Status', 'Manufacturer Name', 'Category Name','Additional Image','Select Type','Required','Option Value','Quantity','Subtrack stock','Price','Price Prefix','Ponits','Ponits Prdefix','Weight','weight Prefix');
						//$products_column = array('Product ID', 'Product Name',  'Model', 'Price', 'Quantity', 'Require Shipping', 'Image', 'Manufacturer Name', 'Category Name');
							
						$products_data[0]=   $products_column;   
						
						foreach($product_list as $products_row)
						{
							$products_data[]=   $products_row;            
						} 		


				        header( 'Content-Type: text/csv' );
				        header( 'Content-Disposition: attachment;filename="product_list_'.date("Y m d G i s").'.csv"');
						$out = fopen('php://output', 'w');
				
						foreach ($products_data as $fields) {
						    fputcsv($out, $fields);
						}
						
						fclose($out);
	

					
}
public function cleanString($text) {
						// 1) convert á ô => a o
						$text = preg_replace("/[áàâãªä]/u","a",$text);
						$text = preg_replace("/[ÁÀÂÃÄ]/u","A",$text);
						$text = preg_replace("/[ÍÌÎÏ]/u","I",$text);
						$text = preg_replace("/[íìîï]/u","i",$text);
						$text = preg_replace("/[éèêë]/u","e",$text);
						$text = preg_replace("/[ÉÈÊË]/u","E",$text);
						$text = preg_replace("/[óòôõºö]/u","o",$text);
						$text = preg_replace("/[ÓÒÔÕÖ]/u","O",$text);
						$text = preg_replace("/[úùûü]/u","u",$text);
						$text = preg_replace("/[ÚÙÛÜ]/u","U",$text);
						$text = preg_replace("/[’‘‹›‚]/u","'",$text);
						$text = preg_replace("/[“”«»„]/u",'"',$text);
						$text = str_replace("–","-",$text);
						$text = str_replace(" "," ",$text);
						$text = str_replace("ç","c",$text);
						$text = str_replace("Ç","C",$text);
						$text = str_replace("ñ","n",$text);
						$text = str_replace("Ñ","N",$text);
					 
						//2) Translation CP1252. &ndash; => -
						$trans = get_html_translation_table(HTML_ENTITIES); 
						$trans[chr(130)] = '&sbquo;';    // Single Low-9 Quotation Mark 
						$trans[chr(131)] = '&fnof;';    // Latin Small Letter F With Hook 
						$trans[chr(132)] = '&bdquo;';    // Double Low-9 Quotation Mark 
						$trans[chr(133)] = '&hellip;';    // Horizontal Ellipsis 
						$trans[chr(134)] = '&dagger;';    // Dagger 
						$trans[chr(135)] = '&Dagger;';    // Double Dagger 
						$trans[chr(136)] = '&circ;';    // Modifier Letter Circumflex Accent 
						$trans[chr(137)] = '&permil;';    // Per Mille Sign 
						$trans[chr(138)] = '&Scaron;';    // Latin Capital Letter S With Caron 
						$trans[chr(139)] = '&lsaquo;';    // Single Left-Pointing Angle Quotation Mark 
						$trans[chr(140)] = '&OElig;';    // Latin Capital Ligature OE 
						$trans[chr(145)] = '&lsquo;';    // Left Single Quotation Mark 
						$trans[chr(146)] = '&rsquo;';    // Right Single Quotation Mark 
						$trans[chr(147)] = '&ldquo;';    // Left Double Quotation Mark 
						$trans[chr(148)] = '&rdquo;';    // Right Double Quotation Mark 
						$trans[chr(149)] = '&bull;';    // Bullet 
						$trans[chr(150)] = '&ndash;';    // En Dash 
						$trans[chr(151)] = '&mdash;';    // Em Dash 
						$trans[chr(152)] = '&tilde;';    // Small Tilde 
						$trans[chr(153)] = '&trade;';    // Trade Mark Sign 
						$trans[chr(154)] = '&scaron;';    // Latin Small Letter S With Caron 
						$trans[chr(155)] = '&rsaquo;';    // Single Right-Pointing Angle Quotation Mark 
						$trans[chr(156)] = '&oelig;';    // Latin Small Ligature OE 
						$trans[chr(159)] = '&Yuml;';    // Latin Capital Letter Y With Diaeresis 
						$trans['euro'] = '&euro;';    // euro currency symbol 
						ksort($trans); 
						 
						foreach ($trans as $k => $v) {
							$text = str_replace($v, $k, $text);
						}
					 
						// 3) remove <p>, <br/> ...
						$text = strip_tags($text); 
						 
						// 4) &amp; => & &quot; => '
						$text = html_entity_decode($text);
						 
						// 5) remove Windows-1252 symbols like "TradeMark", "Euro"...
						$text = preg_replace('/[^(\x20-\x7F)]*/','', $text); 
						 
						$targets=array('\r\n','\n','\r','\t');
						$results=array(" "," "," ","");
						$text = str_replace($targets,$results,$text);
					 
						//XML compatible
						/*
						$text = str_replace("&", "and", $text);
						$text = str_replace("<", ".", $text);
						$text = str_replace(">", ".", $text);
						$text = str_replace("\\", "-", $text);
						$text = str_replace("/", "-", $text);
						*/
						 
						return ($text);
					}
]]></add>
        </operation>
</file>
<file path="admin/model/catalog/product.php">
        <operation>
            <search><![CDATA[public function editProduct($product_id, $data) {]]></search>
            <add position="before"><![CDATA[public function getImportManufacturerId($manufacturer_name) {
		$query = $this->db->query("SELECT manufacturer_id FROM " . DB_PREFIX . "manufacturer WHERE name LIKE '" . $manufacturer_name . "'");
        if($query->row)
            return $query->row['manufacturer_id'];
        else
            return '';
	}
	
	public function getImportCategoryId($explode_product_category1) {
		$query = $this->db->query("SELECT category_id FROM " . DB_PREFIX . "category_description WHERE name LIKE '" . $explode_product_category1 . "'");
        if($query->row)
            return $query->row['category_id'];
        else
            return '';
	}
	public function getOptionId($option_type) {
		$query = $this->db->query("SELECT option_id FROM " . DB_PREFIX . "option_description WHERE name LIKE '" . $option_type . "'");
        if($query->row)
            return $query->row['option_id'];
        else
            return '';
	}
	public function getOptionTypeId($get_option_id) {
		$query = $this->db->query("SELECT type FROM " . DB_PREFIX . "option WHERE option_id = '" . $get_option_id . "'");
        if($query->row)
            return $query->row['type'];
        else
            return '';
	}
	public function getOptionValueId($option_value) {
		$query = $this->db->query("SELECT option_value_id FROM " . DB_PREFIX . "option_value_description WHERE name LIKE '" . $option_value . "'");
        if($query->row)
            return $query->row['option_value_id'];
        else
            return '';
	}
	public function getStockStatusId($stock_status_name) {
		$query = $this->db->query("SELECT stock_status_id FROM " . DB_PREFIX . "stock_status WHERE name LIKE '" . $stock_status_name . "'");
        if($query->row)
            return $query->row['stock_status_id'];
        else
            return '';
	}
//export product functions
public function export_getmanufacturerid($manufacturer_id) {
		$query = $this->db->query("SELECT name FROM " . DB_PREFIX . "manufacturer WHERE manufacturer_id = '" . (int)$manufacturer_id . "'");

		return $query->row;
	}
	
		public function export_getcategoryid($product_id) {
		$query = $this->db->query("SELECT category_id FROM " . DB_PREFIX . "product_to_category WHERE product_id = '" . (int)$product_id . "'");

		return $query->rows;
	}
		
		public function export_getcategory_name($export_get_category_id2) {
		$query = $this->db->query("SELECT name FROM " . DB_PREFIX . "category_description WHERE category_id = '" . (int)$export_get_category_id2 . "'");

		return $query->row;
	}
		
		public function export_getimagepath($product_id) {
		$query = $this->db->query("SELECT image FROM " . DB_PREFIX . "product_image WHERE product_id = '" . (int)$product_id . "'");

		return $query->rows;
	}
		
	
		public function export_getoption_details($get_product_id) {
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_option po LEFT JOIN " . DB_PREFIX . "option o ON(o.option_id=po.option_id) LEFT JOIN " . DB_PREFIX . "option_description od ON(o.option_id=od.option_id) WHERE po.product_id = '" . (int)$get_product_id . "'");
		//print_r($query->rows);
		$product_option_data=array();
		
		foreach ($query->rows as $product_option) {
			
			$product_option_value_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_option_value pov LEFT JOIN " . DB_PREFIX . "option_value ov ON(ov.option_value_id=pov.option_value_id) LEFT JOIN " . DB_PREFIX . "option_value_description ovd ON(ov.option_value_id=ovd.option_value_id) WHERE pov.product_option_id = '" . (int)$product_option['product_option_id'] . "'");
		$product_option_value_data=array();
		foreach ($product_option_value_query->rows as $product_option_value) {
				$product_option_value_data[] = array(
					'product_option_value_id' => $product_option_value['product_option_value_id'],
					'option_value_id'         => $product_option_value['option_value_id'],
					'option_value_name'       => $product_option_value['name'],
					'quantity'                => $product_option_value['quantity'],
					'subtract'                => $product_option_value['subtract'],
					'price'                   => $product_option_value['price'],
					'price_prefix'            => $product_option_value['price_prefix'],
					'points'                  => $product_option_value['points'],
					'points_prefix'           => $product_option_value['points_prefix'],						
					'weight'                  => $product_option_value['weight'],
					'weight_prefix'           => $product_option_value['weight_prefix']					
				);
			}

			$product_option_data[] = array(
				'product_option_id'    => $product_option['product_option_id'],
				'option_id'            => $product_option['option_id'],
				'name'                 => $product_option['name'],
				'type'                 => $product_option['type'],			
				'product_option_value' => $product_option_value_data,
				'option_value'         => $product_option['value'],
				'required'             => $product_option['required']	
			
			);
		}

		return $product_option_data;
	}

        public function getOutOfStockName($stock_status_id) {
		$query = $this->db->query("SELECT name FROM " . DB_PREFIX . "stock_status WHERE stock_status_id = '" . (int)$stock_status_id . "'");
        if($query->row)
            return $query->row['name'];
        else
            return '';
	}
	public function getstoreID($product_id) {
		$query = $this->db->query("SELECT store_id FROM " . DB_PREFIX . "product_to_store WHERE product_id = '" . (int)$product_id . "'");

		return $query->row;
	}
		
]]></add>
        </operation>
</file>
<file path="admin/view/template/catalog/product_list.tpl">
        <operation>
            <search><![CDATA[<div class="pull-right"><a href="<?php echo $add; ?>" data-toggle="tooltip" title="<?php echo $button_add; ?>" class="btn btn-primary"><i class="fa fa-plus"></i></a>]]></search>
            <add position="replace"><![CDATA[<div class="pull-right"><a href="<?php echo $import; ?>" data-toggle="tooltip" title="<?php echo $button_import; ?>" class="btn btn-success"><i class="fa fa-arrow-down"></i><a href="<?php echo $export; ?>" data-toggle="tooltip" title="<?php echo "Export"; ?>" class="btn btn-success"><i class="fa fa-arrow-up"></i></a></a><a href="<?php echo $add; ?>" data-toggle="tooltip" title="<?php echo $button_add; ?>" class="btn btn-primary"><i class="fa fa-plus"></i></a>]]></add>
        </operation>
</file>
</modification>
